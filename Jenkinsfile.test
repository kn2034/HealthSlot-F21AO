pipeline {
    agent {
        node {
            label 'any'
        }
    }
    
    environment {
        NODE_VERSION = 'v16'
    }
    
    stages {
        stage('Environment Info') {
            steps {
                script {
                    sh 'echo "Current branch: ${env.BRANCH_NAME}"'
                    sh 'ls -la'
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                script {
                    try {
                        sh 'node --version'
                    } catch (err) {
                        echo 'Node.js not found, installing...'
                        sh '''
                            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
                            export NVM_DIR="$HOME/.nvm"
                            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                            nvm install ${NODE_VERSION}
                            nvm use ${NODE_VERSION}
                        '''
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        sh 'npm install'
                    } catch (err) {
                        unstable('Failed to install dependencies')
                        error 'Failed to install dependencies'
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh 'npm test'
                    } catch (err) {
                        unstable('Tests failed')
                        error 'Tests failed'
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                cleanWs(
                    cleanWhenSuccess: true,
                    cleanWhenFailure: true,
                    cleanWhenUnstable: true
                )
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
} 