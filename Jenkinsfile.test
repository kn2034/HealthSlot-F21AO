#!/usr/bin/env groovy

// Test pipeline for HealthSlot project
// Testing webhook trigger - this comment will trigger the build
pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    options {
        skipDefaultCheckout(false)
        disableConcurrentBuilds()
    }
    
    environment {
        NODE_VERSION = 'v16'
        DOCKER_HUB_USERNAME = 'kirananarayanak'
        DOCKER_IMAGE = "${DOCKER_HUB_USERNAME}/healthslot"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig-credentials')
    }
    
    stages {
        stage('Verify Pipeline') {
            steps {
                script {
                    echo 'Verifying pipeline configuration...'
                    echo "Running from file: Jenkinsfile.test"
                    echo "Current workspace: ${WORKSPACE}"
                }
            }
        }
        
        stage('Verify Environment') {
            steps {
                script {
                    echo 'Checking build environment...'
                    sh '''
                        echo "Workspace directory:"
                        pwd
                        echo "System information:"
                        uname -a
                        echo "Current user:"
                        whoami
                    '''
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                script {
                    try {
                        sh 'node --version'
                    } catch (err) {
                        echo 'Node.js not found, installing...'
                        sh '''
                            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
                            export NVM_DIR="$HOME/.nvm"
                            if [ -f "$NVM_DIR/nvm.sh" ]; then
                                . "$NVM_DIR/nvm.sh"
                                nvm install ${NODE_VERSION}
                                nvm use ${NODE_VERSION}
                            else
                                echo "NVM installation failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        sh '''
                            # Install all dependencies including dev dependencies
                            npm install
                            
                            # Explicitly install mongodb-memory-server if not present
                            if ! npm list mongodb-memory-server >/dev/null 2>&1; then
                                echo "Installing mongodb-memory-server..."
                                npm install --save-dev mongodb-memory-server@latest
                            fi
                            
                            # Verify mongodb-memory-server installation
                            npm list mongodb-memory-server
                        '''
                    } catch (err) {
                        echo "Error installing dependencies: ${err}"
                        unstable('Failed to install dependencies')
                        error 'Failed to install dependencies'
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh '''
                            # Set NODE_ENV to test
                            export NODE_ENV=test
                            
                            # Run tests with increased memory limit and timeout
                            NODE_OPTIONS="--max-old-space-size=4096" npm test -- --detectOpenHandles --forceExit
                        '''
                    } catch (err) {
                        echo "Error running tests: ${err}"
                        unstable('Tests failed')
                        error 'Tests failed'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    sh """
                        echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                        docker logout
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG')]) {
                        sh """
                            # Apply Kubernetes configurations
                            kubectl apply -f k8s/namespaces.yaml
                            kubectl apply -f k8s/staging/configmap.yaml
                            kubectl apply -f k8s/staging/mongodb.yaml
                            kubectl apply -f k8s/staging/app-deployment.yaml
                            
                            # Update the image in deployment
                            kubectl set image deployment/healthslot-staging healthslot=${DOCKER_IMAGE}:${DOCKER_TAG} -n staging
                            
                            # Wait for rollout to complete
                            kubectl rollout status deployment/healthslot-staging -n staging --timeout=300s
                            
                            # Get deployment status
                            echo "Deployment Status:"
                            kubectl get deployments -n staging
                            
                            # Get service status
                            echo "Service Status:"
                            kubectl get services -n staging
                            
                            # Get pods status
                            echo "Pods Status:"
                            kubectl get pods -n staging
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
} 