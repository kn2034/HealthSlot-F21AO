#!/usr/bin/env groovy

// Test pipeline for HealthSlot project
// Testing webhook trigger - this comment will trigger the build
pipeline {
    agent { label 'built-in' }
    
    triggers {
        githubPush()
    }
    
    options {
        skipDefaultCheckout(false)
        disableConcurrentBuilds()
    }
    
    environment {
        NODE_VERSION = '18'
        DOCKER_HUB_USERNAME = 'kirananarayanak'
        DOCKER_IMAGE = "${DOCKER_HUB_USERNAME}/healthslot"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig-credentials')
        JIRA_SITE = 'healthslot-jira'
        JIRA_CREDENTIALS = credentials('jira-credentials')
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:${env.PATH}"
        BRANCH_NAME = "${env.GIT_BRANCH?.replaceFirst('^origin/', '') ?: 'unknown'}"
        IS_HEALTHSLOT_PIPELINE = "${env.JOB_NAME?.contains('HealthSlot-Pipeline')}"
        JEST_TIMEOUT = '30000'
        MONGOMS_VERSION = '7.0.5'
    }
    
    stages {
        stage('Verify Environment') {
            steps {
                script {
                    echo "Pipeline running on branch: ${env.BRANCH_NAME}"
                    echo "Git Branch: ${env.GIT_BRANCH}"
                    echo "Build URL: ${env.BUILD_URL}"
                    echo "Job Name: ${env.JOB_NAME}"
                    echo "Is HealthSlot Pipeline: ${env.IS_HEALTHSLOT_PIPELINE}"
                    sh '''
                        echo "Workspace directory:"
                        pwd
                        echo "System information:"
                        uname -a
                        echo "Current user:"
                        whoami
                        echo "Git info:"
                        git branch --show-current || true
                        git rev-parse HEAD || true
                        
                        # Check Homebrew
                        echo "Homebrew version:"
                        brew --version || true
                        
                        # Update Homebrew
                        brew update
                    '''
                }
            }
        }
        
        stage('Setup Node.js') {
            when {
                expression { 
                    return env.IS_HEALTHSLOT_PIPELINE == 'true' || env.BRANCH_NAME in ['development', 'qa']
                }
            }
            steps {
                echo "Setting up Node.js..."
                sh '''
                    # Install Node.js 18 LTS
                    echo "Installing/Updating Node.js 18..."
                    brew install node@18 || brew upgrade node@18 || true
                    brew unlink node || true
                    brew link --overwrite node@18
                    
                    # Add Homebrew's node path to PATH
                    export PATH="/opt/homebrew/opt/node@18/bin:$PATH"
                    
                    # Verify installation
                    echo "Node.js version:"
                    node --version
                    echo "NPM version:"
                    npm --version
                    
                    # Update npm to latest compatible version
                    npm install -g npm@10
                '''
            }
        }
        
        stage('Install Dependencies') {
            when {
                expression { 
                    return env.IS_HEALTHSLOT_PIPELINE == 'true' || env.BRANCH_NAME in ['development', 'qa']
                }
            }
            steps {
                sh '''
                    # Add Homebrew's node path to PATH
                    export PATH="/opt/homebrew/opt/node@18/bin:$PATH"
                    
                    # Clean install
                    rm -rf node_modules package-lock.json
                    
                    # Install all dependencies including dev dependencies
                    npm install
                    
                    # Explicitly install test dependencies with specific versions
                    npm install --save-dev \
                        mongodb-memory-server@8.15.1 \
                        jest@29.7.0 \
                        supertest@6.3.4 \
                        @types/jest@29.5.12
                    
                    # Create Jest config
                    echo '{
                      "testTimeout": 30000,
                      "testEnvironment": "node",
                      "setupFilesAfterEnv": ["./jest.setup.js"]
                    }' > jest.config.js
                    
                    # Create Jest setup file
                    echo 'jest.setTimeout(30000);' > jest.setup.js
                    
                    # List installed packages
                    echo "Installed packages:"
                    npm list --depth=0
                '''
            }
        }
        
        stage('Run Tests') {
            when {
                expression { 
                    return env.IS_HEALTHSLOT_PIPELINE == 'true' || env.BRANCH_NAME in ['development', 'qa']
                }
            }
            steps {
                sh '''
                    # Add Homebrew's node path to PATH
                    export PATH="/opt/homebrew/opt/node@18/bin:$PATH"
                    
                    export NODE_ENV=test
                    export NODE_OPTIONS="--max-old-space-size=4096"
                    export MONGOMS_VERSION=7.0.5
                    export MONGOMS_DEBUG=1
                    export JEST_TIMEOUT=30000
                    
                    # Show test environment
                    echo "Node version: $(node --version)"
                    echo "NPM version: $(npm --version)"
                    echo "NODE_ENV: $NODE_ENV"
                    echo "MongoDB Memory Server Version: $MONGOMS_VERSION"
                    
                    # Run tests with detailed output
                    npm test -- --detectOpenHandles --forceExit --verbose --runInBand
                '''
            }
        }
        
        stage('Build Docker Image') {
            when {
                expression { 
                    return env.IS_HEALTHSLOT_PIPELINE == 'true' || env.BRANCH_NAME in ['development', 'qa', 'jenkins-pipeline']
                }
            }
            steps {
                script {
                    def branchTag = env.BRANCH_NAME
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag} ${DOCKER_IMAGE}:${branchTag}
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            when {
                expression { 
                    return env.IS_HEALTHSLOT_PIPELINE == 'true' || env.BRANCH_NAME in ['development', 'qa', 'jenkins-pipeline']
                }
            }
            steps {
                script {
                    def branchTag = env.BRANCH_NAME
                    sh """
                        echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag}
                        docker push ${DOCKER_IMAGE}:${branchTag}
                        docker logout
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                expression { 
                    return env.BRANCH_NAME == 'qa'
                }
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG')]) {
                        sh '''
                            kubectl apply -f k8s/namespaces.yaml
                            kubectl apply -f k8s/staging-deployment.yaml
                            kubectl rollout status deployment/healthslot -n staging
                            kubectl get pods,svc -n staging
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def isBuildPipeline = env.JOB_NAME?.contains('HealthSlot-Pipeline')
                if (isBuildPipeline) {
                    echo "Pipeline finished - HealthSlot Pipeline"
                } else {
                    echo "Pipeline finished - Test Pipeline"
                    sh 'docker system prune -f || true'
                }
            }
        }
        success {
            script {
                def isBuildPipeline = env.JOB_NAME?.contains('HealthSlot-Pipeline')
                if (!isBuildPipeline) {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'jira-credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_PASS')]) {
                            jiraComment body: """Build #${env.BUILD_NUMBER} completed successfully
                                Branch: ${env.BRANCH_NAME}
                                Build URL: ${env.BUILD_URL}
                                Commit: ${env.GIT_COMMIT}""",
                                issueKey: 'AO-1',
                                site: 'healthslot-jira'
                        }
                    } catch (err) {
                        echo "Failed to update JIRA: ${err.message}"
                    }
                }
            }
        }
        failure {
            script {
                def isBuildPipeline = env.JOB_NAME?.contains('HealthSlot-Pipeline')
                if (!isBuildPipeline) {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'jira-credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_PASS')]) {
                            jiraComment body: """Build #${env.BUILD_NUMBER} failed
                                Branch: ${env.BRANCH_NAME}
                                Build URL: ${env.BUILD_URL}
                                Commit: ${env.GIT_COMMIT}
                                Please check Jenkins logs for details.""",
                                issueKey: 'AO-1',
                                site: 'healthslot-jira'
                        }
                    } catch (err) {
                        echo "Failed to update JIRA: ${err.message}"
                    }
                }
            }
        }
    }
} 