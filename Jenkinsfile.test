#!/usr/bin/env groovy

// Test pipeline for HealthSlot project
// Testing webhook trigger - this comment will trigger the build
pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    options {
        skipDefaultCheckout(false)
        disableConcurrentBuilds()
    }
    
    environment {
        NODE_VERSION = 'v16'
        DOCKER_HUB_USERNAME = 'kirananarayanak'
        DOCKER_IMAGE = "${DOCKER_HUB_USERNAME}/healthslot"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig-credentials')
        JIRA_SITE = 'healthslot-jira'
        JIRA_CREDENTIALS = credentials('jira-credentials')
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:${env.PATH}"
    }
    
    stages {
        stage('Verify Pipeline') {
            steps {
                script {
                    echo "Verifying pipeline configuration..."
                    echo "Running from file: Jenkinsfile.test"
                    echo "Current workspace: ${env.WORKSPACE}"
                    sh '''
                        which docker || echo "Docker not found in PATH"
                        docker --version || echo "Docker version command failed"
                        echo "Current PATH: $PATH"
                    '''
                }
            }
        }
        
        stage('Verify Environment') {
            steps {
                script {
                    echo "Checking build environment..."
                    sh '''
                        echo "Workspace directory:"
                        pwd
                        echo "System information:"
                        uname -a
                        echo "Current user:"
                        whoami
                    '''
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                script {
                    sh 'node --version'
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        npm install
                        npm list mongodb-memory-server
                        echo "Installing mongodb-memory-server..."
                        npm install --save-dev mongodb-memory-server@latest
                        npm list mongodb-memory-server
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            when {
                anyOf {
                    branch 'development'
                    branch 'qa'
                }
            }
            steps {
                script {
                    sh '''
                        export NODE_ENV=test
                        NODE_OPTIONS=--max-old-space-size=4096 npm test -- --detectOpenHandles --forceExit
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            when {
                anyOf {
                    branch 'development'
                    branch 'qa'
                    branch 'main'
                }
            }
            steps {
                script {
                    def branchTag = env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag} ${DOCKER_IMAGE}:${branchTag}
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            when {
                anyOf {
                    branch 'development'
                    branch 'qa'
                    branch 'main'
                }
            }
            steps {
                script {
                    def branchTag = env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME
                    sh """
                        echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}-${branchTag}
                        docker push ${DOCKER_IMAGE}:${branchTag}
                        docker logout
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'qa'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG')]) {
                        sh '''
                            kubectl apply -f k8s/namespaces.yaml
                            kubectl apply -f k8s/staging-deployment.yaml
                            kubectl rollout status deployment/healthslot -n staging
                            kubectl get pods,svc -n staging
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG')]) {
                        sh '''
                            kubectl apply -f k8s/namespaces.yaml
                            kubectl apply -f k8s/production-deployment.yaml
                            kubectl rollout status deployment/healthslot -n production
                            kubectl get pods,svc -n production
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            script {
                try {
                    withCredentials([usernamePassword(credentialsId: 'jira-credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_PASS')]) {
                        withEnv(['JIRA_SITE=healthslot-jira']) {
                            jiraComment body: """Build #${env.BUILD_NUMBER} completed successfully
                                Branch: ${env.BRANCH_NAME}
                                Build URL: ${env.BUILD_URL}
                                Commit: ${env.GIT_COMMIT}""",
                                issueKey: 'AO-1',
                                site: 'healthslot-jira'
                        }
                    }
                } catch (err) {
                    echo "Failed to update JIRA: ${err.message}"
                }
            }
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
            script {
                try {
                    withCredentials([usernamePassword(credentialsId: 'jira-credentials', usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_PASS')]) {
                        withEnv(['JIRA_SITE=healthslot-jira']) {
                            jiraComment body: """Build #${env.BUILD_NUMBER} failed
                                Branch: ${env.BRANCH_NAME}
                                Build URL: ${env.BUILD_URL}
                                Commit: ${env.GIT_COMMIT}
                                Please check Jenkins logs for details.""",
                                issueKey: 'AO-1',
                                site: 'healthslot-jira'
                        }
                    }
                } catch (err) {
                    echo "Failed to update JIRA: ${err.message}"
                }
            }
        }
    }
} 